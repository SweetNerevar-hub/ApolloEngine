Date: 06/10/2024 (day/month/year)

Subject: Game Scenes (or, the difficulty of naming things) & Introduction to my .diary

Welcome to my first entry into this stream of conciousness I will call my 'diary'.
With each new commit to a remote branch (or whenever I feel like it), I will try to explain my headspace during the implementation of features and why I do certain things.
This is a practice that I'm lifting from uni, much to my own surprise, as the reflection documents we students were mandated to do after every project was constrictive and too frequent (between 6 - 9 per unit), often feeling like more tedious documenation, rather than a true reflection of the process.
Another inspiration for this diary thing I'm doing is so I can keep a record of my process during the development of not only this engine, but future engines and even games that I plan to make with this engine.
However, what really what put this thought into my head was reading the book Game Engine Black Book: Doom, by Fabien Sanglard. Where I was introduced to Id's practice of recording thoughts and keeping people up-to-date with projects via their .plan files which were uploaded to a public server.


This commit introduces the early foundations of the engine user's ability to create game scenes.
Currently at work we are developing a custom AI implementation for things like navigation and agent behaviours, so there has been much discussion on state machines (as that is what we are using).
So recently I've put much research (for me) into AI behavioural systems and the different implementations of a state machine, a finite state machine (fsm) for my next game project specifically.

I was racking my brain about how to label the states that are basically just game scenes. My implementation results in user's able to inherit from a base Scene class and call pure virtual functions, like update() and render().
However, I struggling to seperate them from just a very different kind of 'state', like an AI behaviour state, or a player character state. 
It didn't feel right calling them 'scenes' since (and I was mainly concerned with how Unity uses the word 'scene') there may be entire scene changes, but I also wanted this system to implement non-scene changes like a pause menu.
However, I didn't like lumping it together with the term 'state' either, as that has quite a broad term. I ended up just calling them scenes, as no-one actually cares since I'll only ever be the one using this engine, yet I do try to create features and implement naming conventions as if a million people will use it.
A dogma I try to follow for every creative project, as it forces me to think deeply about what I'm doing and whether someone else will be able to understand it.


P.S. I was supposed to create this .diary much earlier during the implementation of the ECS architecture. But for some reason I hummed-and-awed at how I would go about it, and so completely skipped over it.
I wanted to talk about where I found the implementation details (Dave Churchill's excellent lectures) and how I fixed some of the issues that became present later on (component storage scalability, and creating a tuple iterator).
However, there is a possiblity that I create a custom ECS using bitmasks to store entitie's components. As I'm not a huge fan of obtuse C++ features like templates, fold expressions and other features I don't understand, and I find simpler solutions far more elegant.
The bedrock of the architecture is mainly complete, however there is still many additions to be made, like storing user created components.

I could keep going on about future plans, the sample code I'm pulling from and the optimisations I plan to make to that. But it's late and I do want to commit this.
I hope I keep going with this .diary thing as I think it will be cool to look back on later in life. But it's still too early to know whether this will be a main-stay, or if I'll lose motivation to write these reflections in the future.

(I promise they won't all be this long)

- Cameron Moore